// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        static int screen;
        static boolean curColor;
        static Array twoToThe;

        /** Initializes the Screen. */
        function void init() {
        var int i;
        var int k;
        let screen = 16384;
        let curColor = true;
        let twoToThe = Array.new(16);
        let i = 0;
        let k = 1;
        while (i < 16) {
            let twoToThe[i] = k;
            let k = k + k;
            let i = i + 1;
        }
        return;
    }

        /** Erases the entire screen. */
        function void clearScreen() {
            var boolean tempColor;
            let tempColor = curColor;
            do Screen.setColor(false);
            do Screen.drawRectangle(0, 0, 511, 255);
            do Screen.setColor(tempColor);
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let curColor = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
            var int address;
            var int bitInd;

            let address = (^^^^^y) + (####x);
            let bitInd = x & 15; // x mod 16
            do Screen.drawAddress(address, twoToThe[bitInd]);
            
            return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            var int temp;
            var int a;
            var int b;
            var int diff;
            var int dx;
            var int dy;
            var int x1Bit;
            var int x2Bit;
            var int x1Block;
            var int x2Block;
            var int x1Complement;
            var int x2Complement;
            var int address;

            let a = 0;
            let b = 0;
            let diff = 0;

            if (x1 > x2) {
                // switch x
                let temp = x1;
                let x1 = x2;
                let x2 = temp;
                // switch y
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
            }

            let dx = x2 - x1;
            let dy = y2 - y1;
            if (dy > 0) {
                while (~(a > dx) & ~(b > dy)) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            }

            if (dy < 0) {
                while (~(a > dx) & ~(b < dy)) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff - dy;
                    } else {
                        let b = b - 1;
                        let diff = diff - dx;
                    }
                }
            }

            if (dy = 0) {
                let x1Bit = x1 & 15; // x1 mod 16
                let x1Complement = (~(twoToThe[x1Bit] - 1));
                let x1Block = x1 / 16;
                let x2Bit = x2 & 15; // x2 mod 16
                let x2Complement = (^twoToThe[x2Bit]) - 1;
                let x2Block = x2 / 16;

                if (x1Block = x2Block) {
                    let address = (^^^^^y1) + (####x1); // 32 * y + x / 16
                    do Screen.drawAddress(address, (x1Complement & x2Complement));
                } else {
                    let address = (^^^^^y1) + (####x1);
                    do Screen.drawAddress(address, x1Complement);
                    let address = (^^^^^y2) + (####x2);
                    do Screen.drawAddress(address, x2Complement);
                    let temp = x1Block + 1 ;
                    let address = (^^^^^y1) + (####x1) + 1; // address(x1, y1) + 1
                    while (temp < x2Block) {
                        do Screen.drawAddress(address, true);
                        let temp = temp + 1;
                        let address = address + 1;
                    }
                }
            }
            return;
        }

        function void drawAddress(int address, int drawVal) {
            var int pixelVal;
            let pixelVal = Memory.peek(screen + address);
            if (curColor) {
                do Memory.poke(screen + address, (drawVal | pixelVal));
            } else {
                do Memory.poke(screen + address, ((~drawVal) & pixelVal));
            }
            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
            var int y;
            let y = y1;
            while (~(y > y2)) {
                do Screen.drawLine(x1, y, x2, y);
                let y = y + 1;
            } 
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
            var int dy;
            var int halfWidth;
            let dy = -r;
            while (~(dy > r)) {
                let halfWidth = Math.sqrt((r * r) - (dy * dy));
                do Screen.drawLine((x - halfWidth), (y + dy), (x + halfWidth), (y + dy));
                let dy = dy + 1;
            }
            return;
        }
}
