// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    
    
    static Array heap;
    static int freeList;
    static int listLen;


    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null    
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let freeList[0] = 14335;
        let freeList[1] = null;
        let listLen = 1;
        
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.


        /// TODO first place size, second next free
        var int i;
        var int j;
        var int tmpNum;
        var int prevMem;
        var int mem;
        let prevMem = 0;
        let i = freeList;
        let j = 0;
        if (listLen > 0)
        {
            while ( j < listLen )
            { 
                if (i[0] > size)
                {
                    let tmpNum = size + 1;
                    if (i[0] = tmpNum)
                    {
                        let mem = i+1;
                        if (prevMem = 0)
                        {
                            let freeList = i[1];
                        }
                        else
                        {
                            let prevMem[1] = i[1];
                        }
                        let listLen = listLen - 1;
                        return mem;
                    }
                    let tmpNum = tmpNum + 1;
                    if (i[0] = tmpNum)
                    {
                        // NO GOOD STATE !
                       let mem = mem;
                    }
                    else
                    {
                        let mem = i + (i[0] - size - 1);
                        let i[0] = i[0] - size - 1;
                        let mem[0] = size + 1;
                        let mem = mem + 1;
                        return mem;
                    }
                }
                let j = j + 1;
                let prevMem = i;
                let i = i[1];
            }
        }
        
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        
        let o[0] = freeList;
        let freeList = o-1;
        
        let listLen = listLen + 1;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int maxi;
        var int size;

        let size = o-1;
        let size = size[0];
        let size = size - 1;
        
        let maxi = o[0];
        
        while ( size > 0)
        {
            if (o[size] > maxi)
            {
                let maxi = o[size];
            }
            let size = size - 1;
        }
        
        return maxi;
    }
}
